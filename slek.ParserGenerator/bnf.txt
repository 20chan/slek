program := stmt*
stmt := simple_stmt | compound_stmt

simple_stmt := import_stmt | break_stmt | continue_stmt | return_stmt | expr
import_stmt := 'import' module
break_stmt := 'break'
continue_stmt := 'continue'
return_stmt := 'return' expr*

compound_stmt := module_def | struct_def | func_def | var_def | if_stmt | while_stmt | for_stmt
module_def := 'module' ID '{' program '}'
struct_def := 'struct' ID '{' (struct_field_dec | func_def | constructor)* '}'
struct_field_dec := ID ':' type
constructor := 'new' '(' parameters ')' suite
func_def := 'fn' ID '(' parameters ')' ':' type suite
var_def := 'var' ID ':' type ('=' expr)?
if_stmt := 'if' '(' expr ')' suite ('else' 'if' '(' expr ')' suite)* ('else' suite)?
while_stmt := 'while' '(' expr ')' suite
for_stmt := 'for' '(' for_iter ')' suite
for_iter := ('var' ID ':' : type 'in' expr) | (ID 'in' expr)

expr := land_expr ('||' expr)?
land_expr := or_expr ('&&' land_expr)?
or_expr := xor_expr ('|' or_expr)?
xor_expr := and_expr ('^' xor_expr)?
and_expr := comp_expr ('&' and_expr)?
comp_expr := shift_expr (('<' | '>' | '<=' | '>=' | '==' | '!=') comp_expr)?
shift_expr := arith_expr ('<<' | '>>' shift_expr)?
arith_expr := term (('+' | '-') arith_expr)?
term := factor (('*' | '/' | '%') term)?
factor := ('+' | '-' | '~') factor | atom_expr
atom_expr := atom trailer*
atom := ('(' expr ')') | array | newarr | ID | NUMBER | STRING | TRUE | FALSE
array := '[' (expr (expr ',')*)? ']'
newarr := type '[' expr ']'
trailer := '[' expr ']' | '(' expr* ')'

suite := stmt | ('{' stmt* '}')
type := ID
module := ID